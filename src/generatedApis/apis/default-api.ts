/* tslint:disable */
/* eslint-disable */
/**
 * Objects API
 * API for managing objects
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ApiKey } from '../models';
import { AuthCredentials } from '../models';
import { Marker } from '../models';
import { Reading } from '../models';
import { Readings } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Authenticate user and retrieve API key
         * @param {AuthCredentials} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokenPost: async (body: AuthCredentials, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling authTokenPost.');
            }
            const localVarPath = `/auth/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all markers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markerListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marker/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2", ["read", "write"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a marker by its ID
         * @param {number} markerId ID of the marker to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markerMarkerIdGet: async (markerId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'markerId' is not null or undefined
            if (markerId === null || markerId === undefined) {
                throw new RequiredError('markerId','Required parameter markerId was null or undefined when calling markerMarkerIdGet.');
            }
            const localVarPath = `/marker/{markerId}`
                .replace(`{${"markerId"}}`, encodeURIComponent(String(markerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2", ["read", "write"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Partially update a marker by its ID
         * @param {Marker} body Partially updated marker object
         * @param {number} markerId ID of the marker to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markerMarkerIdPatch: async (body: Marker, markerId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling markerMarkerIdPatch.');
            }
            // verify required parameter 'markerId' is not null or undefined
            if (markerId === null || markerId === undefined) {
                throw new RequiredError('markerId','Required parameter markerId was null or undefined when calling markerMarkerIdPatch.');
            }
            const localVarPath = `/marker/{markerId}`
                .replace(`{${"markerId"}}`, encodeURIComponent(String(markerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2", ["read", "write"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all readings for a specific Marker by its ID.
         * @param {number} markerId ID of the Marker to retrieve readings for.
         * @param {Date} [startTimestamp] Start timestamp of the time range for the Marker readings to retrieve.
         * @param {Date} [endTimestamp] End timestamp of the time range for the Marker readings to retrieve.
         * @param {number} [limit] The numbers of items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markerMarkerIdReadingListGet: async (markerId: number, startTimestamp?: Date, endTimestamp?: Date, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'markerId' is not null or undefined
            if (markerId === null || markerId === undefined) {
                throw new RequiredError('markerId','Required parameter markerId was null or undefined when calling markerMarkerIdReadingListGet.');
            }
            const localVarPath = `/marker/{markerId}/reading/list`
                .replace(`{${"markerId"}}`, encodeURIComponent(String(markerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2", ["read", "write"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (startTimestamp !== undefined) {
                localVarQueryParameter['startTimestamp'] = (startTimestamp as any instanceof Date) ?
                    (startTimestamp as any).toISOString() :
                    startTimestamp;
            }

            if (endTimestamp !== undefined) {
                localVarQueryParameter['endTimestamp'] = (endTimestamp as any instanceof Date) ?
                    (endTimestamp as any).toISOString() :
                    endTimestamp;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a new reading for a specific Marker by its ID.
         * @param {Reading} body JSON object containing the details of the new reading to add.
         * @param {number} markerId ID of the Marker to add a reading for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markerMarkerIdReadingListPost: async (body: Reading, markerId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling markerMarkerIdReadingListPost.');
            }
            // verify required parameter 'markerId' is not null or undefined
            if (markerId === null || markerId === undefined) {
                throw new RequiredError('markerId','Required parameter markerId was null or undefined when calling markerMarkerIdReadingListPost.');
            }
            const localVarPath = `/marker/{markerId}/reading/list`
                .replace(`{${"markerId"}}`, encodeURIComponent(String(markerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2", ["read", "write"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a specific reading for a specific Marker by its ID and reading ID.
         * @param {number} markerId ID of the Marker to delete Reading from.
         * @param {number} readingId ID of the Reading to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markerMarkerIdReadingReadingIdDelete: async (markerId: number, readingId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'markerId' is not null or undefined
            if (markerId === null || markerId === undefined) {
                throw new RequiredError('markerId','Required parameter markerId was null or undefined when calling markerMarkerIdReadingReadingIdDelete.');
            }
            // verify required parameter 'readingId' is not null or undefined
            if (readingId === null || readingId === undefined) {
                throw new RequiredError('readingId','Required parameter readingId was null or undefined when calling markerMarkerIdReadingReadingIdDelete.');
            }
            const localVarPath = `/marker/{markerId}/reading/{readingId}`
                .replace(`{${"markerId"}}`, encodeURIComponent(String(markerId)))
                .replace(`{${"readingId"}}`, encodeURIComponent(String(readingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2", ["read", "write"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a new marker.
         * @param {Marker} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markerPost: async (body: Marker, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling markerPost.');
            }
            const localVarPath = `/marker`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2", ["read", "write"])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Authenticate user and retrieve API key
         * @param {AuthCredentials} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authTokenPost(body: AuthCredentials, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ApiKey>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).authTokenPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all markers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markerListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Marker>>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).markerListGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get a marker by its ID
         * @param {number} markerId ID of the marker to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markerMarkerIdGet(markerId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Marker>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).markerMarkerIdGet(markerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Partially update a marker by its ID
         * @param {Marker} body Partially updated marker object
         * @param {number} markerId ID of the marker to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markerMarkerIdPatch(body: Marker, markerId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).markerMarkerIdPatch(body, markerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all readings for a specific Marker by its ID.
         * @param {number} markerId ID of the Marker to retrieve readings for.
         * @param {Date} [startTimestamp] Start timestamp of the time range for the Marker readings to retrieve.
         * @param {Date} [endTimestamp] End timestamp of the time range for the Marker readings to retrieve.
         * @param {number} [limit] The numbers of items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markerMarkerIdReadingListGet(markerId: number, startTimestamp?: Date, endTimestamp?: Date, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Readings>>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).markerMarkerIdReadingListGet(markerId, startTimestamp, endTimestamp, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Add a new reading for a specific Marker by its ID.
         * @param {Reading} body JSON object containing the details of the new reading to add.
         * @param {number} markerId ID of the Marker to add a reading for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markerMarkerIdReadingListPost(body: Reading, markerId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).markerMarkerIdReadingListPost(body, markerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete a specific reading for a specific Marker by its ID and reading ID.
         * @param {number} markerId ID of the Marker to delete Reading from.
         * @param {number} readingId ID of the Reading to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markerMarkerIdReadingReadingIdDelete(markerId: number, readingId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).markerMarkerIdReadingReadingIdDelete(markerId, readingId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Add a new marker.
         * @param {Marker} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markerPost(body: Marker, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Marker>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).markerPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Authenticate user and retrieve API key
         * @param {AuthCredentials} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authTokenPost(body: AuthCredentials, options?: AxiosRequestConfig): Promise<AxiosResponse<ApiKey>> {
            return DefaultApiFp(configuration).authTokenPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all markers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markerListGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Marker>>> {
            return DefaultApiFp(configuration).markerListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a marker by its ID
         * @param {number} markerId ID of the marker to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markerMarkerIdGet(markerId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Marker>> {
            return DefaultApiFp(configuration).markerMarkerIdGet(markerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Partially update a marker by its ID
         * @param {Marker} body Partially updated marker object
         * @param {number} markerId ID of the marker to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markerMarkerIdPatch(body: Marker, markerId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DefaultApiFp(configuration).markerMarkerIdPatch(body, markerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all readings for a specific Marker by its ID.
         * @param {number} markerId ID of the Marker to retrieve readings for.
         * @param {Date} [startTimestamp] Start timestamp of the time range for the Marker readings to retrieve.
         * @param {Date} [endTimestamp] End timestamp of the time range for the Marker readings to retrieve.
         * @param {number} [limit] The numbers of items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markerMarkerIdReadingListGet(markerId: number, startTimestamp?: Date, endTimestamp?: Date, limit?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Readings>>> {
            return DefaultApiFp(configuration).markerMarkerIdReadingListGet(markerId, startTimestamp, endTimestamp, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a new reading for a specific Marker by its ID.
         * @param {Reading} body JSON object containing the details of the new reading to add.
         * @param {number} markerId ID of the Marker to add a reading for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markerMarkerIdReadingListPost(body: Reading, markerId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DefaultApiFp(configuration).markerMarkerIdReadingListPost(body, markerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a specific reading for a specific Marker by its ID and reading ID.
         * @param {number} markerId ID of the Marker to delete Reading from.
         * @param {number} readingId ID of the Reading to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markerMarkerIdReadingReadingIdDelete(markerId: number, readingId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DefaultApiFp(configuration).markerMarkerIdReadingReadingIdDelete(markerId, readingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a new marker.
         * @param {Marker} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markerPost(body: Marker, options?: AxiosRequestConfig): Promise<AxiosResponse<Marker>> {
            return DefaultApiFp(configuration).markerPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Authenticate user and retrieve API key
     * @param {AuthCredentials} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async authTokenPost(body: AuthCredentials, options?: AxiosRequestConfig) : Promise<AxiosResponse<ApiKey>> {
        return DefaultApiFp(this.configuration).authTokenPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all markers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async markerListGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Marker>>> {
        return DefaultApiFp(this.configuration).markerListGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get a marker by its ID
     * @param {number} markerId ID of the marker to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async markerMarkerIdGet(markerId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Marker>> {
        return DefaultApiFp(this.configuration).markerMarkerIdGet(markerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Partially update a marker by its ID
     * @param {Marker} body Partially updated marker object
     * @param {number} markerId ID of the marker to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async markerMarkerIdPatch(body: Marker, markerId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DefaultApiFp(this.configuration).markerMarkerIdPatch(body, markerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all readings for a specific Marker by its ID.
     * @param {number} markerId ID of the Marker to retrieve readings for.
     * @param {Date} [startTimestamp] Start timestamp of the time range for the Marker readings to retrieve.
     * @param {Date} [endTimestamp] End timestamp of the time range for the Marker readings to retrieve.
     * @param {number} [limit] The numbers of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async markerMarkerIdReadingListGet(markerId: number, startTimestamp?: Date, endTimestamp?: Date, limit?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Readings>>> {
        return DefaultApiFp(this.configuration).markerMarkerIdReadingListGet(markerId, startTimestamp, endTimestamp, limit, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Add a new reading for a specific Marker by its ID.
     * @param {Reading} body JSON object containing the details of the new reading to add.
     * @param {number} markerId ID of the Marker to add a reading for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async markerMarkerIdReadingListPost(body: Reading, markerId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DefaultApiFp(this.configuration).markerMarkerIdReadingListPost(body, markerId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete a specific reading for a specific Marker by its ID and reading ID.
     * @param {number} markerId ID of the Marker to delete Reading from.
     * @param {number} readingId ID of the Reading to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async markerMarkerIdReadingReadingIdDelete(markerId: number, readingId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DefaultApiFp(this.configuration).markerMarkerIdReadingReadingIdDelete(markerId, readingId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Add a new marker.
     * @param {Marker} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public async markerPost(body: Marker, options?: AxiosRequestConfig) : Promise<AxiosResponse<Marker>> {
        return DefaultApiFp(this.configuration).markerPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
